<div class="container">
	<div class="row">
		<div class="col">
			<h1>Treehouse Javascript</h1>
		</div>
	</div>
	<pre>
		alert('hi');	
		document.write('&lt;h1>welcome to havascript&lt;/h1>')		
	</pre>
</div>

<div class="container">
	<div class="row">
<h2>002 JavaScript Loops, Arrays and Objects</h2>		
	</div>
	<div class="row">
<div class="col">
		<h3>While loops</h3>
		<p>While loops are good if you don't want the loop to start unless a condition is met</p>
		<pre>
var counter = 0;
while(counter < 10){
	var randNum = randomNumber(6);
	document.write(randNum + ' ');
	counter += 1;
}
		</pre>	
</div>
	</div> <!-- row -->
	<div class="row">
<div class="col">
		<h3>Computer guessing a random number generated by it.</h3>
		<pre>
	var upper = 10000;
	var randomNumber = getRandomNumber(upper);
	var guess;
	var attempts = 0;
	function getRandomNumber(upper){
		return Math.floor(Math.random() * upper ) + 1;
	}
	while (guess !== randomNumber){
		guess = getRandomNumber(upper);
		attempts += 1;
	}
	document.write("<p>The random number was: " + randomNumber + "</p>");
	document.write("<p>It too the computer " + attempts + " attempts to get it right.</p>");			
		</pre>	
		<div id="answer"></div>
</div>
	</div> <!-- row -->
	<hr>
	<div class="row">
		<div class="col">
			<h3>Do While Loop</h3>	
			<p>Exectues the loop at least once, unlike While loop</p>		
			<div id="guess"></div>
		</div>
	</div>
	<div class="row">
		<div class="col">
			<h3>For Loops</h3>
			<p>Are good when you need something to run multiple times right away</p>
			<div id="forLoop"></div>
		</div>
	</div>
	<div class="row">
		<div class="col">
			<h3>Arrays</h3>
			<p>MyArray.push() adds an item at the end</p>		
			<p>MyArray.unshift() adds an item at the beginning</p>
			<p>MyArray.pop() takes the last item out and can return it if needed</p>
			<p>MyArray.shift() takes the first item out and can return it if needed</p>
			<p>MyArray.join(', ') joins the array with a comma into a string</p>
			<p>MyArray.concat joins 2 arrays</p>
			<p>MyArray.indexOf('Apple'), returns the index of apple if in the array, if not it returns a -1</p>
			<p>2 dimensional arrays, are an array of arrays</p>
			<div id="inStore"></div>
		</div>
	</div> <!-- row -->
	<div class="row">
		<div class="col">
			<h3>Objects</h3>
			<p>Simplest way to thing of objects is: objects have properties and methods: a property is a variable that belongs to the object, a method is something the object can do or can be done to the object</p>
			<p>Javascript objects let you store data in a 'key-value' pair, or 'property-value'</p>
			<p>Basic object, accessing the values with either the . or ['']</p>
			<pre>
	var person = {
		name: 'Sarah',
		country: 'US',
		age: 35,
		treehouseStudend: true,
		skills: ['Java', 'HTML', 'CSS']
	}
	alert(person.name);
	alert(person['name']);				
			</pre>
			<p>The 'For In' loop is only available to objects</p>
			<p>Here we create an object 'person', person.passport property is added after creation, for in loop to loop through the keys and values, 'key' is just a variable, it could be 'prop' or whatever, the key, ':' prints out on same line with a type of concatenation, the person["name"] only prints out that property value every time</p>
<pre>
	var person = {
		name: 'Sarah',
		country: 'US',
		age: 35,
		treehouseStudent: true,
		skills: ['Java', 'HTML', 'CSS']
	}
	person.passport = "US";
	
	for (var key in person){
		console.log(key);
		console.log(person[key]);
		console.log(key, ': ', person[key]);		
		console.log(person["name"]);
	}	
</pre>
		</div>
	</div>
</div> <!-- container -->
<hr>
<div class="container">
	<div class="row todo-list">
		<div class="col">
			<h2>005 Interactive Web Pages with JavaScript - Treehouse</h2>
			<p id="add-new-task">
				<label for="new-task">Add item</label>
				<input type="text" id="new-task">
				<button>Add</button>
			</p>
			<h3>Todo</h3>
			<ul id="incomplete-tasks">
				<li>
					<input type="checkbox">
					<label for="">Pay Bills</label>
					<input type="text">
					<button class="edit">Edit</button>
					<button class="delete">Delete</button>
				</li>
				<li class="editMode">
					<input type="checkbox">
					<label for="">Go Shopping</label>
					<input type="text" value="Go Shopping">
					<button class="edit">Edit</button>
					<button class="delete">Delete</button>
				</li>				
			</ul>
		</div>
		<div class="col">
			<h3>Completed</h3>
			<ul id="completed-tasks">
				<li>
					<input type="checkbox" checked>
					<label for="">See the Doctor</label>
					<input type="text">
					<button class="edit">Edit</button>
					<button class="delete">Delete</button>
				</li>
			</ul>				
		</div>
	</div>
</div>

<script>
	// document.write('<h1>What happened</h1>'); 
</script>

<script>
	// var message = "Hello!";
	// alert(message);	
	// message = "This erases the previous message";
	// alert(message);
	// message = 'This has "different" quotes';
	// alert(message);
	// message = 'This has the \'same\' single quotes in the string using the \\';
	// alert(message);

	// capturing user input from a form using the prompt
	// var bandName = prompt('Who sings \'Welcome to the machine\'');
	// // alert('Hi ' + name);
	// document.write('Welcome to the Machine is by ' + bandName + '<br>');

	// // working with concatenation
	// var finalMessage;
	// question = prompt('What is your name?');
	// finalMessage = "Hi " + question;
	// question = prompt('What is your favorite band?');
	// finalMessage += " Did you know " + question + " is playing tonight at the button south?";
	// document.write(finalMessage);
</script>

<script>
	// var upper = 10000;
	// var randomNumber = getRandomNumber(upper);
	// var guess;
	// var attempts = 0;
	// function getRandomNumber(upper){
	// 	return Math.floor(Math.random() * upper ) + 1;
	// }
	// while (guess !== randomNumber){
	// 	guess = getRandomNumber(upper);
	// 	attempts += 1;
	// }
	// var answer = "<p>The random number was: " + randomNumber + "</p>";
	// answer += "<p>It too the computer " + attempts + " attempts to get it right.</p>";
	// document.getElementById("answer").innerHTML = answer;
</script>

<script>
	// var randomNumber = getRandomNumber(10);
	// var guess;
	// var guessCount = 0;
	// var correctGuess = false;

	// function getRandomNumber(upper){
	// 	var num = Math.floor(Math.random() * upper ) + 1;
	// 	return num;
	// }	
	// do {
	// 	guess = prompt('I am thinking of a number between 1 and 10. What is it?');
	// 	guessCount += 1;
	// 	if (parseInt(guess) === randomNumber) {
	// 		correctGuess = true;
	// 	}
	// } while (!correctGuess)
	// var correctAnswer = '<p>You guess the number!</p>';
	// correctAnswer += '<p>It took you ' + guessCount + ' tries to guess the number ' + randomNumber + '</p>';
	// document.getElementById('guess').innerHTML = correctAnswer;
</script>

<script>
	var html = '';
	for (var i = 1; i <= 10; i++){
		html += '<div>' + i + '</div>';
	}
	document.getElementById("forLoop").innerHTML = html;
</script>

<script>
	// to see if a grocery store has certain products

/*
	var inStock = ["apples", "eggs", 'milk', 'cookies', 'cheese', 'bread', 'lettuce', 'carrot', 'broccoli', 'pizza', 'potato', 'crackers', 'onion', 'tofu', 'frozen dinner', 'cucumber'];
	var search;

	function print(message){
		var paragraph;
		document.getElementById("inStore").innerHTML = message;
	}
	while (true){
		search = prompt('Search for a product in our store. type "list" to show all of the produce and "quit" to exit');
		search = search.toLowerCase();
		if (search === 'quit'){
			break;
		} else if (search === 'list'){
			print(inStock.join(', '));
		} else {
			if (inStock.indexOf(search) > -1) {
				print('Yes, we have ' + search + ' in the store.');
			} else {
				print(search + ' is not in stock');
			}
		}
	}
*/
</script>

<script>
	var person = {
		name: 'Sarah',
		country: 'US',
		age: 35,
		treehouseStudent: true,
		skills: ['Java', 'HTML', 'CSS']
	}
	// alert(person.name);
	// alert(person['name']);
	person.passport = "US";
	
	function getPerson(){
		return person;
	}
	// console.log(getPerson().age);

	for (var key in person){
		// console.log(key);
		// console.log(person[key]);
		// console.log(key, ': ', person[key]);
		console.log(person["name"]);
	}
</script>

<script>
	var taskInput = document.getElementById('new-task');
	var addButton = document.getElementsByTagName("button")[2];
	var incompleteTasksHolder = document.getElementById('incomplete-tasks');
	var completedTasksHolder = document.getElementById('completed-tasks');
	
	// new task list item
	var createNewTaskElement = function(taskString){
		// create list item
		var listItem = document.createElement("li");
		// input checkbox
		var checkBox = document.createElement("input");
		// label
		var label = document.createElement("label");
		//input text
		var editInput = document.createElement("input");
		// button edit
		var editButton = document.createElement("button");
		// button delete
		var deleteButton = document.createElement("button");
		// each elemts, needs modifying
		checkBox.type = "checkbox";
		editInput.type = "text";

		editButton.innerText = "Edit";
		editButton.className = "edit";
		deleteButton.innerText = "Delete";
		deleteButton.className = 'delete';

		label.innerText = taskString;

			// and appended		
		listItem.appendChild(checkBox);
		listItem.appendChild(label);
		listItem.appendChild(editInput);
		listItem.appendChild(editButton);
		listItem.appendChild(deleteButton);
		return listItem;
	}

	//add a new task
	var addTask = function() {
		console.log('add task...');
		//	create a new list item with the text from #new-task
		var listItem = createNewTaskElement(taskInput.value);

		// append listItem to incompleteTasksHolder
		incompleteTasksHolder.appendChild(listItem);
		bindTaskEvents(listItem, taskCompleted);
		taskInput.value = '';
	}

	
	// edit an existing task
	var editTask = function(){
		console.log('edit task...');
		var listItem = this.parentNode;
		var editInput = listItem.querySelector("input[type=text]");
		var label = listItem.querySelector("label");
		
		var containsClass = listItem.classList.contains("editMode");
			// if the cllass of parend is .ediMode
			if(containsClass){
				// switch from .editMode
				// label text become the inputs value
				label.innerText = editInput.value;
			} else {
				// switch to editMode
				//input vale becomes the label's text
				editInput.value = label.innerText;
			}

			// toggle .editmore on the parent
			listItem.classList.toggle("editMode");
	}

	// delete an existing task
	var deleteTask = function(){
		console.log('delete task...');
		// remove the parent list item from the ul
		var listItem = this.parentNode;
		var ul = listItem.parentNode;

		ul.removeChild(listItem);
	}

	// mark a task as complete
	var taskCompleted = function(){
		console.log('complete task...');
			// append the task list item to the #completed-tasks
			var listItem = this.parentNode;
			completedTasksHolder.appendChild(listItem);
			bindTaskEvents(listItem, taskIncomplete);
	}

	var taskIncomplete = function(){
		console.log('incomplete task...');
		// when the checkbox is uncheked
			// append to the #incomplete-tasks
			var listItem = this.parentNode;
			incompleteTasksHolder.appendChild(listItem);
			bindTaskEvents(listItem, taskCompleted);
	}	

	var bindTaskEvents = function(taskListItem, checkBoxEvenHandler)		{
		console.log('bind list item events');
		//select its children
		var checkBox = taskListItem.querySelector("input[type=checkbox");
		var editButton = taskListItem.querySelector("button.edit");
		var deleteButton = taskListItem.querySelector("button.delete");
			// bind eidt task to edit button
			editButton.onclick = editTask;
			// bind delete tesk to delete button
			deleteButton.onclick = deleteTask;
			// bind task checkBoxEvenHandler to checkbox
			checkBox.onchange = checkBoxEvenHandler;
	}

	// set the click handler to the addTask function
	// addButton.onclick = addTask;
	function myAddTask(){
		if(taskInput.value != ''){
			addTask();
		}
	}
	addButton.addEventListener("click", myAddTask);

	//cycle over incomplete taskholder ul list itmes
	for(var i = 0; i < incompleteTasksHolder.children.length; i++){
		// for each list item
			//select its children
				// bind events to list items children (task completed)
				bindTaskEvents(incompleteTasksHolder.children[i], taskCompleted);
	}

	//cycle over completed taskholder ul list itmes
	for(var i = 0; i< completedTasksHolder.children.length; i++){
		// for each list item
			// bind events to list items children (task incomplete)
			bindTaskEvents(completedTasksHolder.children[i], taskIncomplete);
	}


</script>